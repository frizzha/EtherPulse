import os
from argparse import ArgumentParser

from dotenv import load_dotenv
from tqdm import tqdm
from web3 import Web3

# --- –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ ---
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def connect_to_network():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ç–∏ Ethereum –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
    load_dotenv()
    infura_project_id = os.getenv("INFURA_PROJECT_ID")
    if not infura_project_id or infura_project_id == "YOUR_INFURA_PROJECT_ID_HERE":
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: INFURA_PROJECT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.{Colors.ENDC}")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª {Colors.BOLD}.env{Colors.ENDC} —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º.")
        print("–§–æ—Ä–º–∞—Ç: INFURA_PROJECT_ID=\"abcdef1234567890\"")
        return None
    
    w3 = Web3(Web3.HTTPProvider(f'https://mainnet.infura.io/v3/{infura_project_id}'))
    
    if not w3.is_connected():
        print(f"{Colors.FAIL}–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç —Å–µ—Ç–∏ Ethereum.{Colors.ENDC}")
        return None
        
    print(f"{Colors.GREEN}–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ç—å—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ú–æ–Ω–∏—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.{Colors.ENDC}")
    return w3

def monitor_vitals(w3, contract_address, num_blocks):
    """
    –°–Ω–∏–º–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (vitals) —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.
    –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å - –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        patient_address = w3.to_checksum_address(contract_address)
    except ValueError:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞).{Colors.ENDC}")
        return

    latest_block_number = w3.eth.block_number
    start_block = latest_block_number - num_blocks + 1

    print(f"\n{Colors.HEADER}{Colors.BOLD}ü©∫ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ EtherPulse...{Colors.ENDC}")
    print(f"–ü–ê–¶–ò–ï–ù–¢:{Colors.CYAN} {patient_address}{Colors.ENDC}")
    print(f"–ì–õ–£–ë–ò–ù–ê –ê–ù–ê–õ–ò–ó–ê:{Colors.CYAN} {num_blocks} –±–ª–æ–∫–æ–≤ (–ø–µ—Ä–∏–æ–¥ —Å {start_block} –ø–æ {latest_block_number}){Colors.ENDC}")
    
    active_users_in_period = set()
    total_transactions = 0

    pbar = tqdm(range(start_block, latest_block_number + 1), 
                desc=f"{Colors.BLUE}–°–Ω—è—Ç–∏–µ –∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º—ã{Colors.ENDC}",
                ncols=100)

    for block_num in pbar:
        try:
            block = w3.eth.get_block(block_num, full_transactions=True)
            for tx in block.transactions:
                if tx['to'] and w3.to_checksum_address(tx['to']) == patient_address:
                    total_transactions += 1
                    user_address = w3.to_checksum_address(tx['from'])
                    active_users_in_period.add(user_address)
        except Exception as e:
            tqdm.write(f"{Colors.WARNING}–ü–æ–º–µ—Ö–∏ –Ω–∞ –ª–∏–Ω–∏–∏ –≤ –±–ª–æ–∫–µ {block_num}: {e}{Colors.ENDC}")
            continue

    # --- –†–ê–°–ß–ï–¢ –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô ---
    total_unique_users = len(active_users_in_period)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ –¥–æ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –º—ã –Ω–µ –∑–Ω–∞–ª–∏ –Ω–∏ –æ–± –æ–¥–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –∏–∑–º–µ—Ä–∏—Ç—å –ø—Ä–∏—Ç–æ–∫ "–Ω–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤".
    known_users_before_period = set() 
    new_users = active_users_in_period - known_users_before_period
    
    # –ù–∞—à–∞ –∫–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: –í–∏—Ç–∞–ª—å–Ω–æ—Å—Ç—å!
    vitality_score = (len(new_users) / total_unique_users) * 100 if total_unique_users > 0 else 0
    # –ü—É–ª—å—Å - —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –±–ª–æ–∫
    pulse_rate = total_transactions / num_blocks

    # --- –í–´–í–û–î –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û –û–¢–ß–ï–¢–ê ---
    print(f"\n{Colors.HEADER}{Colors.BOLD}üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç EtherPulse:{Colors.ENDC}")
    print("--------------------------------------------------")
    print(f"–û–±—â–µ–µ —á–∏—Å–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–π): {Colors.BOLD}{Colors.GREEN}{total_transactions}{Colors.ENDC}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫): {Colors.BOLD}{Colors.GREEN}{total_unique_users}{Colors.ENDC}")
    print(f"–ü—É–ª—å—Å (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/–±–ª–æ–∫): {Colors.BOLD}{Colors.CYAN}{pulse_rate:.2f}{Colors.ENDC}")
    
    print(f"\n{Colors.HEADER}{Colors.UNDERLINE}–ö–ª—é—á–µ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è:{Colors.ENDC}")
    print(f"‚ù§Ô∏è  {Colors.WARNING}–ò–Ω–¥–µ–∫—Å –í–∏—Ç–∞–ª—å–Ω–æ—Å—Ç–∏ (Vitality Score):{Colors.ENDC} "
          f"{Colors.BOLD}{vitality_score:.2f}%{Colors.ENDC}")
    print(f"   {Colors.WARNING}(–î–æ–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±—â–µ–π –º–∞—Å—Å–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö){Colors.ENDC}")
    print("--------------------------------------------------")
    
    if vitality_score > 80:
         print(f"{Colors.GREEN}–î–ò–ê–ì–ù–û–ó: –û—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ. –ü–∞—Ü–∏–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é.{Colors.ENDC}")
    elif vitality_score > 50:
        print(f"{Colors.CYAN}–î–ò–ê–ì–ù–û–ó: –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—ã–π –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.{Colors.ENDC}")
    else:
        print(f"{Colors.BLUE}–î–ò–ê–ì–ù–û–ó: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∑—Ä–µ–ª—ã–º –æ—Ä–≥–∞–Ω–∏–∑–º–æ–º, –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.{Colors.ENDC}")


if __name__ == "__main__":
    parser = ArgumentParser(description="EtherPulse - –º–æ–Ω–∏—Ç–æ—Ä –≤–∏—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.")
    parser.add_argument("contract", help="–ê–¥—Ä–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞) –¥–ª—è –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.")
    parser.add_argument("-b", "--blocks", type=int, default=1000, help="–ì–ª—É–±–∏–Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –±–ª–æ–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000).")
    
    args = parser.parse_args()
    
    network_connection = connect_to_network()
    if network_connection:
        monitor_vitals(network_connection, args.contract, args.blocks)
